<?xml version="1.0" encoding="utf-8"?><testsuite errors="15" failures="7" name="pytest" skips="0" tests="264" time="378.923"><testcase classname="app.tests.service.test_accor.TestAccor" name="test_balance" time="0.0007636547088623047"/><testcase classname="app.tests.service.test_accor.TestAccor" name="test_login" time="0.00016760826110839844"/><testcase classname="app.tests.service.test_accor.TestAccor" name="test_transactions" time="0.0004992485046386719"/><testcase classname="app.tests.service.test_accor.TestAccorFail" name="test_login_fail" time="0.4290652275085449"/><testcase classname="app.tests.service.test_air_asia.TestAirAsia" name="test_balance" time="0.02577376365661621"/><testcase classname="app.tests.service.test_air_asia.TestAirAsia" name="test_login" time="0.000148773193359375"/><testcase classname="app.tests.service.test_air_asia.TestAirAsia" name="test_transactions" time="0.0004200935363769531"/><testcase classname="app.tests.service.test_air_asia.TestAirAsiaFail" name="test_login_fail" time="2.12785005569458"/><testcase classname="app.tests.service.test_avios.TestAvios" name="test_balance" time="0.12169504165649414"/><testcase classname="app.tests.service.test_avios.TestAvios" name="test_login" time="0.00010204315185546875"/><testcase classname="app.tests.service.test_avios.TestAvios" name="test_transactions" time="1.277601718902588"/><testcase classname="app.tests.service.test_avios.TestAviosFail" name="test_login_bad_number" time="2.5815329551696777"/><testcase classname="app.tests.service.test_avis.TestAvis" name="test_balance" time="0.04729604721069336"/><testcase classname="app.tests.service.test_avis.TestAvis" name="test_login" time="0.00013327598571777344"/><testcase classname="app.tests.service.test_avis.TestAvis" name="test_transactions" time="0.0006184577941894531"/><testcase classname="app.tests.service.test_avis.TestAvisFail" name="test_login_bad_credentials" time="0.42729783058166504"/><testcase classname="app.tests.service.test_beefeater.TestBeefeater" name="test_balance" time="0.017267227172851562"/><testcase classname="app.tests.service.test_beefeater.TestBeefeater" name="test_login" time="0.0001575946807861328"/><testcase classname="app.tests.service.test_beefeater.TestBeefeater" name="test_transactions" time="1.8104350566864014"/><testcase classname="app.tests.service.test_beefeater.TestBeefeaterFail" name="test_login_fail" time="0.4577932357788086"><failure message="AssertionError: &apos;Account locked on end site&apos; != &apos;Invalid credentials&apos;
- Account locked on end site
+ Invalid credentials">self = &lt;app.tests.service.test_beefeater.TestBeefeaterFail testMethod=test_login_fail&gt;

    def test_login_fail(self):
        b = Beefeater(1, 1)
        with self.assertRaises(LoginError) as e:
            b.attempt_login(CREDENTIALS[&apos;bad&apos;])
&gt;       self.assertEqual(e.exception.name, &apos;Invalid credentials&apos;)
E       AssertionError: &apos;Account locked on end site&apos; != &apos;Invalid credentials&apos;
E       - Account locked on end site
E       + Invalid credentials

app/tests/service/test_beefeater.py:33: AssertionError</failure></testcase><testcase classname="app.tests.service.test_boots.TestBoots" name="test_balance" time="0.12271809577941895"/><testcase classname="app.tests.service.test_boots.TestBoots" name="test_login" time="0.00011491775512695312"/><testcase classname="app.tests.service.test_boots.TestBoots" name="test_transactions" time="0.005650758743286133"/><testcase classname="app.tests.service.test_boots.TestBootsFail" name="test_login_bad_number" time="0.3661966323852539"/><testcase classname="app.tests.service.test_british_airways.TestBritishAirways" name="test_balance" time="0.1808009147644043"/><testcase classname="app.tests.service.test_british_airways.TestBritishAirways" name="test_login" time="0.00010991096496582031"/><testcase classname="app.tests.service.test_british_airways.TestBritishAirways" name="test_transactions" time="1.54152250289917"/><testcase classname="app.tests.service.test_british_airways.TestBritishAirwaysFail" name="test_login_fail" time="0.33212876319885254"/><testcase classname="app.tests.service.test_carlson.TestCarlson" name="test_balance" time="0.05375027656555176"/><testcase classname="app.tests.service.test_carlson.TestCarlson" name="test_login" time="0.0001385211944580078"/><testcase classname="app.tests.service.test_carlson.TestCarlson" name="test_transactions" time="0.0003764629364013672"/><testcase classname="app.tests.service.test_carlson.TestCarlsonFail" name="test_login_fail" time="0.23329496383666992"/><testcase classname="app.tests.service.test_choicehotels.TestChoiceHotels" name="test_balance" time="0.0004718303680419922"/><testcase classname="app.tests.service.test_choicehotels.TestChoiceHotels" name="test_login" time="0.00016307830810546875"/><testcase classname="app.tests.service.test_choicehotels.TestChoiceHotels" name="test_transactions" time="0.00043702125549316406"/><testcase classname="app.tests.service.test_choicehotels.TestChoiceHotelsFail" name="test_login_fail" time="0.4170668125152588"/><testcase classname="app.tests.service.test_cooperative.TestCooperative" name="test_balance" time="0.10583186149597168"/><testcase classname="app.tests.service.test_cooperative.TestCooperative" name="test_login" time="0.0001633167266845703"/><testcase classname="app.tests.service.test_cooperative.TestCooperative" name="test_transactions" time="0.036592960357666016"/><testcase classname="app.tests.service.test_cooperative.TestCooperativeFail" name="test_login_bad_mfa" time="0.24028277397155762"/><testcase classname="app.tests.service.test_cooperative.TestCooperativeFail" name="test_login_bad_number" time="0.19951939582824707"/><testcase classname="app.tests.service.test_debenhams.TestDebenhams" name="test_balance" time="0.17400646209716797"/><testcase classname="app.tests.service.test_debenhams.TestDebenhams" name="test_login" time="0.00015544891357421875"/><testcase classname="app.tests.service.test_debenhams.TestDebenhams" name="test_transactions" time="0.0004837512969970703"/><testcase classname="app.tests.service.test_debenhams.TestDebenhamsFail" name="test_login_bad_credentials" time="0.2989675998687744"/><testcase classname="app.tests.service.test_decathlon.TestDecathlon" name="test_balance" time="0.06714487075805664"/><testcase classname="app.tests.service.test_decathlon.TestDecathlon" name="test_login" time="0.00016617774963378906"/><testcase classname="app.tests.service.test_decathlon.TestDecathlon" name="test_transactions" time="0.09666991233825684"/><testcase classname="app.tests.service.test_decathlon.TestDecathlonFail" name="test_login_fail" time="0.2998218536376953"/><testcase classname="app.tests.service.test_delta.TestDelta" name="test_balance" time="0.00039267539978027344"/><testcase classname="app.tests.service.test_delta.TestDelta" name="test_login" time="0.00016188621520996094"/><testcase classname="app.tests.service.test_delta.TestDelta" name="test_transactions" time="0.0005626678466796875"/><testcase classname="app.tests.service.test_delta.TestDeltaFail" name="test_login_bad_password" time="0.5373964309692383"/><testcase classname="app.tests.service.test_delta.TestDeltaFail" name="test_login_bad_username" time="0.40247440338134766"/><testcase classname="app.tests.service.test_enterprise.TestEnterprise" name="test_balance" time="0.0003657341003417969"/><testcase classname="app.tests.service.test_enterprise.TestEnterprise" name="test_login" time="0.00016117095947265625"/><testcase classname="app.tests.service.test_enterprise.TestEnterprise" name="test_transactions" time="0.000469207763671875"/><testcase classname="app.tests.service.test_enterprise.TestEnterpriseFail" name="test_login_bad_password" time="0.7464382648468018"/><testcase classname="app.tests.service.test_enterprise.TestEnterpriseFail" name="test_login_fail" time="0.9879918098449707"/><testcase classname="app.tests.service.test_esprit.TestEsprit" name="test_balance" time="0.018557071685791016"/><testcase classname="app.tests.service.test_esprit.TestEsprit" name="test_login" time="0.00015211105346679688"/><testcase classname="app.tests.service.test_esprit.TestEsprit" name="test_transactions" time="0.0004260540008544922"/><testcase classname="app.tests.service.test_esprit.TestEspritFail" name="test_login_fail" time="0.7185401916503906"/><testcase classname="app.tests.service.test_eurostar.TestEurostar" name="test_balance" time="0.0019979476928710938"/><testcase classname="app.tests.service.test_eurostar.TestEurostar" name="test_login" time="0.00014472007751464844"/><testcase classname="app.tests.service.test_eurostar.TestEurostarFail" name="test_login_bad_password" time="1.6889517307281494"/><testcase classname="app.tests.service.test_eurostar.TestEurostarFail" name="test_login_fail" time="1.7916572093963623"/><testcase classname="app.tests.service.test_flying_blue.TestFlyingBlue" name="test_balance" time="0.6116321086883545"/><testcase classname="app.tests.service.test_flying_blue.TestFlyingBlue" name="test_login" time="0.0001342296600341797"/><testcase classname="app.tests.service.test_flying_blue.TestFlyingBlue" name="test_transactions" time="0.00038623809814453125"/><testcase classname="app.tests.service.test_flying_blue.TestFlyingBlueFail" name="test_login_bad_password" time="0.6172082424163818"/><testcase classname="app.tests.service.test_flying_blue.TestFlyingBlueFail" name="test_login_bad_username" time="0.5088319778442383"/><testcase classname="app.tests.service.test_foyles_bookstore.TestFoylesBookstore" name="test_balance" time="0.17169189453125"><error message="test setup failure">cls = &lt;class &apos;app.tests.service.test_foyles_bookstore.TestFoylesBookstore&apos;&gt;

    @classmethod
    def setUpClass(cls):
        cls.w = FoylesBookstore(1, 1)
&gt;       cls.w.attempt_login(CREDENTIALS[&apos;foyalty&apos;])

app/tests/service/test_foyles_bookstore.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/agents/base.py:59: in attempt_login
    self.login(credentials)
app/agents/foyles_bookstore.py:20: in login
    ((&apos;#ctl00_HeaderInfo_lblErrors&apos;, STATUS_LOGIN_FAILED, &apos;Incorrect Username or Password&apos;), ))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;app.agents.foyles_bookstore.FoylesBookstore object at 0x7f51b51b0a58&gt;, incorrect = &apos;/Default.aspx&apos;
error_causes = ((&apos;#ctl00_HeaderInfo_lblErrors&apos;, &apos;STATUS_LOGIN_FAILED&apos;, &apos;Incorrect Username or Password&apos;),), url_part = &apos;path&apos;

    def check_error(self, incorrect, error_causes, url_part=&quot;path&quot;):
        parts = urlsplit(self.browser.url)
        if getattr(parts, url_part) != incorrect:
            return
    
        for error in error_causes:
            selector, error_name, error_match = error
            message = self.browser.select(selector)
            if message and message[0].get_text().strip().startswith(error_match):
&gt;               raise LoginError(error_name)
E               app.agents.exceptions.LoginError: Invalid credentials: We could not update your account because your username and/or password were reported to be incorrect. Please re-verify your username and password. code: 403

app/agents/base.py:131: LoginError</error></testcase><testcase classname="app.tests.service.test_foyles_bookstore.TestFoylesBookstore" name="test_login" time="0.00020837783813476562"><error message="test setup failure">cls = &lt;class &apos;app.tests.service.test_foyles_bookstore.TestFoylesBookstore&apos;&gt;

    @classmethod
    def setUpClass(cls):
        cls.w = FoylesBookstore(1, 1)
&gt;       cls.w.attempt_login(CREDENTIALS[&apos;foyalty&apos;])

app/tests/service/test_foyles_bookstore.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/agents/base.py:59: in attempt_login
    self.login(credentials)
app/agents/foyles_bookstore.py:20: in login
    ((&apos;#ctl00_HeaderInfo_lblErrors&apos;, STATUS_LOGIN_FAILED, &apos;Incorrect Username or Password&apos;), ))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;app.agents.foyles_bookstore.FoylesBookstore object at 0x7f51b51b0a58&gt;, incorrect = &apos;/Default.aspx&apos;
error_causes = ((&apos;#ctl00_HeaderInfo_lblErrors&apos;, &apos;STATUS_LOGIN_FAILED&apos;, &apos;Incorrect Username or Password&apos;),), url_part = &apos;path&apos;

    def check_error(self, incorrect, error_causes, url_part=&quot;path&quot;):
        parts = urlsplit(self.browser.url)
        if getattr(parts, url_part) != incorrect:
            return
    
        for error in error_causes:
            selector, error_name, error_match = error
            message = self.browser.select(selector)
            if message and message[0].get_text().strip().startswith(error_match):
&gt;               raise LoginError(error_name)
E               app.agents.exceptions.LoginError: Invalid credentials: We could not update your account because your username and/or password were reported to be incorrect. Please re-verify your username and password. code: 403

app/agents/base.py:131: LoginError</error></testcase><testcase classname="app.tests.service.test_foyles_bookstore.TestFoylesBookstore" name="test_transactions" time="0.00016260147094726562"><error message="test setup failure">cls = &lt;class &apos;app.tests.service.test_foyles_bookstore.TestFoylesBookstore&apos;&gt;

    @classmethod
    def setUpClass(cls):
        cls.w = FoylesBookstore(1, 1)
&gt;       cls.w.attempt_login(CREDENTIALS[&apos;foyalty&apos;])

app/tests/service/test_foyles_bookstore.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/agents/base.py:59: in attempt_login
    self.login(credentials)
app/agents/foyles_bookstore.py:20: in login
    ((&apos;#ctl00_HeaderInfo_lblErrors&apos;, STATUS_LOGIN_FAILED, &apos;Incorrect Username or Password&apos;), ))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;app.agents.foyles_bookstore.FoylesBookstore object at 0x7f51b51b0a58&gt;, incorrect = &apos;/Default.aspx&apos;
error_causes = ((&apos;#ctl00_HeaderInfo_lblErrors&apos;, &apos;STATUS_LOGIN_FAILED&apos;, &apos;Incorrect Username or Password&apos;),), url_part = &apos;path&apos;

    def check_error(self, incorrect, error_causes, url_part=&quot;path&quot;):
        parts = urlsplit(self.browser.url)
        if getattr(parts, url_part) != incorrect:
            return
    
        for error in error_causes:
            selector, error_name, error_match = error
            message = self.browser.select(selector)
            if message and message[0].get_text().strip().startswith(error_match):
&gt;               raise LoginError(error_name)
E               app.agents.exceptions.LoginError: Invalid credentials: We could not update your account because your username and/or password were reported to be incorrect. Please re-verify your username and password. code: 403

app/agents/base.py:131: LoginError</error></testcase><testcase classname="app.tests.service.test_foyles_bookstore.TestFoylesBookstoreFail" name="test_login_fail" time="0.06799674034118652"/><testcase classname="app.tests.service.test_gha.TestGha" name="test_balance" time="0.05386614799499512"/><testcase classname="app.tests.service.test_gha.TestGha" name="test_login" time="0.00015854835510253906"/><testcase classname="app.tests.service.test_gha.TestGha" name="test_transactions" time="0.00037097930908203125"/><testcase classname="app.tests.service.test_gha.TestGhaFail" name="test_login_fail" time="2.2767677307128906"/><testcase classname="app.tests.service.test_greggs.TestGreggs" name="test_balance" time="1.7727551460266113"/><testcase classname="app.tests.service.test_greggs.TestGreggs" name="test_login" time="0.00015044212341308594"/><testcase classname="app.tests.service.test_greggs.TestGreggs" name="test_transactions" time="2.3579020500183105"/><testcase classname="app.tests.service.test_greggs.TestGreggsFail" name="test_login_bad_credentials" time="1.0871808528900146"/><testcase classname="app.tests.service.test_harrods.TestHarrods" name="test_balance" time="7.207497835159302"><error message="test setup failure">cls = &lt;class &apos;app.tests.service.test_harrods.TestHarrods&apos;&gt;

    @classmethod
    def setUpClass(cls):
        cls.h = Harrods(1, 1)
&gt;       cls.h.attempt_login(CREDENTIALS[&apos;harrods&apos;])

app/tests/service/test_harrods.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/agents/base.py:59: in attempt_login
    self.login(credentials)
app/agents/harrods.py:25: in login
    self.open_url(&apos;https://www.harrods.com/Pages/Account/Secure/AccountHome.aspx&apos;)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;app.agents.harrods.Harrods object at 0x7f51b47a93c8&gt;, url = &apos;https://www.harrods.com/Pages/Account/Secure/AccountHome.aspx&apos;, verify = True, method = &apos;get&apos;, data = None, json = None
read_timeout = 5

    def open_url(self, url, verify=True, method=&apos;get&apos;, data=None, json=None, read_timeout=5):
        &quot;&quot;&quot;
            Sensible defaults and error handling for opening url
            http://www.mobify.com/blog/http-requests-are-hard/
            &quot;&quot;&quot;
        connect_timeout = 1
    
        try:
            self.browser.open(url, timeout=(connect_timeout, read_timeout),
                              headers=self.headers, verify=verify, method=method, data=data, json=json)
        except ReadTimeout as exception:
&gt;           raise AgentError(END_SITE_DOWN) from exception
E           app.agents.exceptions.AgentError: End site down: The scheme end site is currently down. code: 530

app/agents/base.py:74: AgentError</error></testcase><testcase classname="app.tests.service.test_harrods.TestHarrods" name="test_login" time="0.0002033710479736328"><error message="test setup failure">cls = &lt;class &apos;app.tests.service.test_harrods.TestHarrods&apos;&gt;

    @classmethod
    def setUpClass(cls):
        cls.h = Harrods(1, 1)
&gt;       cls.h.attempt_login(CREDENTIALS[&apos;harrods&apos;])

app/tests/service/test_harrods.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/agents/base.py:59: in attempt_login
    self.login(credentials)
app/agents/harrods.py:25: in login
    self.open_url(&apos;https://www.harrods.com/Pages/Account/Secure/AccountHome.aspx&apos;)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;app.agents.harrods.Harrods object at 0x7f51b47a93c8&gt;, url = &apos;https://www.harrods.com/Pages/Account/Secure/AccountHome.aspx&apos;, verify = True, method = &apos;get&apos;, data = None, json = None
read_timeout = 5

    def open_url(self, url, verify=True, method=&apos;get&apos;, data=None, json=None, read_timeout=5):
        &quot;&quot;&quot;
            Sensible defaults and error handling for opening url
            http://www.mobify.com/blog/http-requests-are-hard/
            &quot;&quot;&quot;
        connect_timeout = 1
    
        try:
            self.browser.open(url, timeout=(connect_timeout, read_timeout),
                              headers=self.headers, verify=verify, method=method, data=data, json=json)
        except ReadTimeout as exception:
&gt;           raise AgentError(END_SITE_DOWN) from exception
E           app.agents.exceptions.AgentError: End site down: The scheme end site is currently down. code: 530

app/agents/base.py:74: AgentError</error></testcase><testcase classname="app.tests.service.test_harrods.TestHarrods" name="test_transactions" time="0.0001728534698486328"><error message="test setup failure">cls = &lt;class &apos;app.tests.service.test_harrods.TestHarrods&apos;&gt;

    @classmethod
    def setUpClass(cls):
        cls.h = Harrods(1, 1)
&gt;       cls.h.attempt_login(CREDENTIALS[&apos;harrods&apos;])

app/tests/service/test_harrods.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/agents/base.py:59: in attempt_login
    self.login(credentials)
app/agents/harrods.py:25: in login
    self.open_url(&apos;https://www.harrods.com/Pages/Account/Secure/AccountHome.aspx&apos;)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;app.agents.harrods.Harrods object at 0x7f51b47a93c8&gt;, url = &apos;https://www.harrods.com/Pages/Account/Secure/AccountHome.aspx&apos;, verify = True, method = &apos;get&apos;, data = None, json = None
read_timeout = 5

    def open_url(self, url, verify=True, method=&apos;get&apos;, data=None, json=None, read_timeout=5):
        &quot;&quot;&quot;
            Sensible defaults and error handling for opening url
            http://www.mobify.com/blog/http-requests-are-hard/
            &quot;&quot;&quot;
        connect_timeout = 1
    
        try:
            self.browser.open(url, timeout=(connect_timeout, read_timeout),
                              headers=self.headers, verify=verify, method=method, data=data, json=json)
        except ReadTimeout as exception:
&gt;           raise AgentError(END_SITE_DOWN) from exception
E           app.agents.exceptions.AgentError: End site down: The scheme end site is currently down. code: 530

app/agents/base.py:74: AgentError</error></testcase><testcase classname="app.tests.service.test_harrods.TestHarrodsFail" name="test_bad_login" time="0.09414911270141602"/><testcase classname="app.tests.service.test_heathrow.TestHeathrow" name="test_balance" time="0.03277325630187988"/><testcase classname="app.tests.service.test_heathrow.TestHeathrow" name="test_login" time="0.00014662742614746094"/><testcase classname="app.tests.service.test_heathrow.TestHeathrow" name="test_transactions" time="0.2545139789581299"/><testcase classname="app.tests.service.test_heathrow.TestHeathrowFail" name="test_login_fail" time="2.508145809173584"/><testcase classname="app.tests.service.test_hertz.TestHertz" name="test_balance" time="0.35423827171325684"/><testcase classname="app.tests.service.test_hertz.TestHertz" name="test_login" time="0.0013761520385742188"/><testcase classname="app.tests.service.test_hertz.TestHertz" name="test_transactions" time="0.00041866302490234375"/><testcase classname="app.tests.service.test_hertz.TestHertzFail" name="test_login_fail" time="0.3561220169067383"/><testcase classname="app.tests.service.test_holland_and_barrett.TestHollandAndBarrett" name="test_balance" time="0.030103683471679688"><system-err>/home/cl/dev/midas/local/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py:768: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.org/en/latest/security.html
  InsecureRequestWarning)
/home/cl/dev/midas/local/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py:768: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.org/en/latest/security.html
  InsecureRequestWarning)
/home/cl/dev/midas/local/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py:768: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.org/en/latest/security.html
  InsecureRequestWarning)
</system-err></testcase><testcase classname="app.tests.service.test_holland_and_barrett.TestHollandAndBarrett" name="test_login" time="0.00014734268188476562"/><testcase classname="app.tests.service.test_holland_and_barrett.TestHollandAndBarrettFail" name="test_login_fail" time="3.5165247917175293"><system-err>/home/cl/dev/midas/local/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py:768: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.org/en/latest/security.html
  InsecureRequestWarning)
/home/cl/dev/midas/local/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py:768: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.org/en/latest/security.html
  InsecureRequestWarning)
/home/cl/dev/midas/local/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py:768: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.org/en/latest/security.html
  InsecureRequestWarning)
</system-err></testcase><testcase classname="app.tests.service.test_hyatt.TestHyatt" name="test_balance" time="0.03423738479614258"/><testcase classname="app.tests.service.test_hyatt.TestHyatt" name="test_login" time="0.00014591217041015625"/><testcase classname="app.tests.service.test_hyatt.TestHyattFail" name="test_login_fail" time="2.7569782733917236"/><testcase classname="app.tests.service.test_ihg.TestIhg" name="test_balance" time="0.08141088485717773"/><testcase classname="app.tests.service.test_ihg.TestIhg" name="test_login" time="0.00012350082397460938"/><testcase classname="app.tests.service.test_ihg.TestIhg" name="test_transactions" time="0.20342350006103516"/><testcase classname="app.tests.service.test_ihg.TestIHGFail" name="test_login_bad_pin" time="0.8163402080535889"/><testcase classname="app.tests.service.test_ihg.TestIHGFail" name="test_login_fail" time="0.5020163059234619"/><testcase classname="app.tests.service.test_ihg.TestIHGFail" name="test_login_long_pin" time="0.43764424324035645"/><testcase classname="app.tests.service.test_jetblue.TestJetBlue" name="test_balance" time="0.03667163848876953"/><testcase classname="app.tests.service.test_jetblue.TestJetBlue" name="test_login" time="0.00013971328735351562"/><testcase classname="app.tests.service.test_jetblue.TestJetBlue" name="test_transactions" time="0.00040793418884277344"/><testcase classname="app.tests.service.test_jetblue.TestJetBlueFail" name="test_login_fail" time="0.7475519180297852"/><testcase classname="app.tests.service.test_kfc.TestKfc" name="test_balance" time="0.7538115978240967"/><testcase classname="app.tests.service.test_kfc.TestKfc" name="test_login" time="0.00017118453979492188"/><testcase classname="app.tests.service.test_kfc.TestKfcFail" name="test_login_fail" time="0.8352212905883789"/><testcase classname="app.tests.service.test_lufthansa.TestLufthansa" name="test_balance" time="0.0017790794372558594"/><testcase classname="app.tests.service.test_lufthansa.TestLufthansa" name="test_login" time="0.00013113021850585938"/><testcase classname="app.tests.service.test_lufthansa.TestLufthansa" name="test_transactions" time="0.001775503158569336"/><testcase classname="app.tests.service.test_lufthansa.TestLufthansaFail" name="test_login_bad_card_number" time="1.260416030883789"/><testcase classname="app.tests.service.test_lufthansa.TestLufthansaFail" name="test_login_bad_pin" time="0.8700516223907471"/><testcase classname="app.tests.service.test_malaysia_airlines.TestMalaysiaAirlines" name="test_balance" time="0.01052236557006836"/><testcase classname="app.tests.service.test_malaysia_airlines.TestMalaysiaAirlines" name="test_login" time="0.00016450881958007812"/><testcase classname="app.tests.service.test_malaysia_airlines.TestMalaysiaAirlines" name="test_transactions" time="30.4833242893219"/><testcase classname="app.tests.service.test_malaysia_airlines.TestMalaysiaAirlinesFail" name="test_login_fail" time="6.081979751586914"/><testcase classname="app.tests.service.test_mandco.TestMandCo" name="test_balance" time="0.0034728050231933594"/><testcase classname="app.tests.service.test_mandco.TestMandCo" name="test_login" time="0.00013399124145507812"/><testcase classname="app.tests.service.test_mandco.TestMandCo" name="test_transactions" time="0.0003540515899658203"/><testcase classname="app.tests.service.test_mandco.TestMandCoFail" name="test_login_bad_credentials" time="0.885047197341919"/><testcase classname="app.tests.service.test_maximiles.TestMaximiles" name="test_balance" time="0.023676395416259766"/><testcase classname="app.tests.service.test_maximiles.TestMaximiles" name="test_login" time="0.0001475811004638672"/><testcase classname="app.tests.service.test_maximiles.TestMaximiles" name="test_transactions" time="0.00043892860412597656"/><testcase classname="app.tests.service.test_maximiles.TestMaximilesFail" name="test_login_fail" time="0.9557597637176514"/><testcase classname="app.tests.service.test_monsoon.TestMonsoon" name="test_balance" time="0.051560163497924805"><failure message="IndexError: list index out of range">self = &lt;app.tests.service.test_monsoon.TestMonsoon testMethod=test_balance&gt;

    def test_balance(self):
&gt;       balance = self.m.balance()

app/tests/service/test_monsoon.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;app.agents.monsoon.Monsoon object at 0x7f51b3b30400&gt;

    def balance(self):
&gt;       value = extract_decimal(self.browser.select(&apos;div.reward-points dl dd&apos;)[2].text)
E       IndexError: list index out of range

app/agents/monsoon.py:22: IndexError</failure><system-err>/home/cl/dev/midas/local/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py:768: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.org/en/latest/security.html
  InsecureRequestWarning)
/home/cl/dev/midas/local/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py:768: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.org/en/latest/security.html
  InsecureRequestWarning)
/home/cl/dev/midas/local/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py:768: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.org/en/latest/security.html
  InsecureRequestWarning)
/home/cl/dev/midas/local/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py:768: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.org/en/latest/security.html
  InsecureRequestWarning)
</system-err></testcase><testcase classname="app.tests.service.test_monsoon.TestMonsoon" name="test_login" time="0.0001289844512939453"/><testcase classname="app.tests.service.test_monsoon.TestMonsoon" name="test_transactions" time="0.00036597251892089844"/><testcase classname="app.tests.service.test_monsoon.TestMonsoonFail" name="test_login_fail" time="0.4255101680755615"><system-err>/home/cl/dev/midas/local/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py:768: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.org/en/latest/security.html
  InsecureRequestWarning)
/home/cl/dev/midas/local/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py:768: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.org/en/latest/security.html
  InsecureRequestWarning)
/home/cl/dev/midas/local/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py:768: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.org/en/latest/security.html
  InsecureRequestWarning)
/home/cl/dev/midas/local/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py:768: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.org/en/latest/security.html
  InsecureRequestWarning)
</system-err></testcase><testcase classname="app.tests.service.test_morrisons.TestMorrisons" name="test_balance" time="0.33678627014160156"><system-err>/home/cl/dev/midas/local/lib/python3.4/site-packages/requests/packages/urllib3/connectionpool.py:768: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.org/en/latest/security.html
  InsecureRequestWarning)
</system-err></testcase><testcase classname="app.tests.service.test_morrisons.TestMorrisons" name="test_login" time="0.00016546249389648438"/><testcase classname="app.tests.service.test_morrisons.TestMorrisons" name="test_transactions" time="0.27786684036254883"/><testcase classname="app.tests.service.test_morrisons.TestMorrisonsFail" name="test_login_fail" time="0.2595851421356201"/><testcase classname="app.tests.service.test_mymail.TestMyMail" name="test_balance" time="0.5387523174285889"><error message="test setup failure">cls = &lt;class &apos;app.tests.service.test_mymail.TestMyMail&apos;&gt;

    @classmethod
    def setUpClass(cls):
        cls.m = MyMail(1, 1)
&gt;       cls.m.attempt_login(CREDENTIALS[&apos;mymail&apos;])

app/tests/service/test_mymail.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/agents/base.py:59: in attempt_login
    self.login(credentials)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;app.agents.mymail.MyMail object at 0x7f51b3e65f28&gt;, credentials = {&apos;email&apos;: &apos;chris.smith4@gmx.co.uk&apos;, &apos;password&apos;: &apos;KLHansbrics6&apos;}

    def login(self, credentials):
        # AngularJS sets this header as cross-site request forgery protection. Without it, we can&apos;t log in.
        # The cookie is obtained by visiting the login page.
        self.open_url(&apos;https://www.mymail.co.uk/login&apos;)
        self.headers = {
            &apos;X-XSRF-TOKEN&apos;: self.browser.session.cookies._cookies[&apos;www.mymail.co.uk&apos;][&apos;/&apos;][&apos;XSRF-TOKEN&apos;].value
        }
    
        # The login request itself contains json data and is sent by AngularJS.
        data = {
            &apos;rememberMe&apos;: True,
            &apos;username&apos;: credentials[&apos;email&apos;],
            &apos;password&apos;: credentials[&apos;password&apos;],
        }
        self.open_url(&apos;https://www.mymail.co.uk/login&apos;, method=&apos;post&apos;, json=data)
    
        # We have to request account data to tell if we were successfully logged in or not.
        self.open_url(&apos;https://www.mymail.co.uk/defaultMember&apos;)
    
        if self.browser.url == &apos;https://www.mymail.co.uk/login&apos;:
&gt;           raise LoginError(STATUS_LOGIN_FAILED)
E           app.agents.exceptions.LoginError: Invalid credentials: We could not update your account because your username and/or password were reported to be incorrect. Please re-verify your username and password. code: 403

app/agents/mymail.py:28: LoginError</error></testcase><testcase classname="app.tests.service.test_mymail.TestMyMail" name="test_login" time="0.00020360946655273438"><error message="test setup failure">cls = &lt;class &apos;app.tests.service.test_mymail.TestMyMail&apos;&gt;

    @classmethod
    def setUpClass(cls):
        cls.m = MyMail(1, 1)
&gt;       cls.m.attempt_login(CREDENTIALS[&apos;mymail&apos;])

app/tests/service/test_mymail.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/agents/base.py:59: in attempt_login
    self.login(credentials)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;app.agents.mymail.MyMail object at 0x7f51b3e65f28&gt;, credentials = {&apos;email&apos;: &apos;chris.smith4@gmx.co.uk&apos;, &apos;password&apos;: &apos;KLHansbrics6&apos;}

    def login(self, credentials):
        # AngularJS sets this header as cross-site request forgery protection. Without it, we can&apos;t log in.
        # The cookie is obtained by visiting the login page.
        self.open_url(&apos;https://www.mymail.co.uk/login&apos;)
        self.headers = {
            &apos;X-XSRF-TOKEN&apos;: self.browser.session.cookies._cookies[&apos;www.mymail.co.uk&apos;][&apos;/&apos;][&apos;XSRF-TOKEN&apos;].value
        }
    
        # The login request itself contains json data and is sent by AngularJS.
        data = {
            &apos;rememberMe&apos;: True,
            &apos;username&apos;: credentials[&apos;email&apos;],
            &apos;password&apos;: credentials[&apos;password&apos;],
        }
        self.open_url(&apos;https://www.mymail.co.uk/login&apos;, method=&apos;post&apos;, json=data)
    
        # We have to request account data to tell if we were successfully logged in or not.
        self.open_url(&apos;https://www.mymail.co.uk/defaultMember&apos;)
    
        if self.browser.url == &apos;https://www.mymail.co.uk/login&apos;:
&gt;           raise LoginError(STATUS_LOGIN_FAILED)
E           app.agents.exceptions.LoginError: Invalid credentials: We could not update your account because your username and/or password were reported to be incorrect. Please re-verify your username and password. code: 403

app/agents/mymail.py:28: LoginError</error></testcase><testcase classname="app.tests.service.test_mymail.TestMyMail" name="test_transactions" time="0.00017523765563964844"><error message="test setup failure">cls = &lt;class &apos;app.tests.service.test_mymail.TestMyMail&apos;&gt;

    @classmethod
    def setUpClass(cls):
        cls.m = MyMail(1, 1)
&gt;       cls.m.attempt_login(CREDENTIALS[&apos;mymail&apos;])

app/tests/service/test_mymail.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/agents/base.py:59: in attempt_login
    self.login(credentials)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;app.agents.mymail.MyMail object at 0x7f51b3e65f28&gt;, credentials = {&apos;email&apos;: &apos;chris.smith4@gmx.co.uk&apos;, &apos;password&apos;: &apos;KLHansbrics6&apos;}

    def login(self, credentials):
        # AngularJS sets this header as cross-site request forgery protection. Without it, we can&apos;t log in.
        # The cookie is obtained by visiting the login page.
        self.open_url(&apos;https://www.mymail.co.uk/login&apos;)
        self.headers = {
            &apos;X-XSRF-TOKEN&apos;: self.browser.session.cookies._cookies[&apos;www.mymail.co.uk&apos;][&apos;/&apos;][&apos;XSRF-TOKEN&apos;].value
        }
    
        # The login request itself contains json data and is sent by AngularJS.
        data = {
            &apos;rememberMe&apos;: True,
            &apos;username&apos;: credentials[&apos;email&apos;],
            &apos;password&apos;: credentials[&apos;password&apos;],
        }
        self.open_url(&apos;https://www.mymail.co.uk/login&apos;, method=&apos;post&apos;, json=data)
    
        # We have to request account data to tell if we were successfully logged in or not.
        self.open_url(&apos;https://www.mymail.co.uk/defaultMember&apos;)
    
        if self.browser.url == &apos;https://www.mymail.co.uk/login&apos;:
&gt;           raise LoginError(STATUS_LOGIN_FAILED)
E           app.agents.exceptions.LoginError: Invalid credentials: We could not update your account because your username and/or password were reported to be incorrect. Please re-verify your username and password. code: 403

app/agents/mymail.py:28: LoginError</error></testcase><testcase classname="app.tests.service.test_mymail.TestMyMailFail" name="test_login_fail" time="0.5444653034210205"/><testcase classname="app.tests.service.test_nandos.TestNandos" name="test_balance" time="0.7605111598968506"><error message="test setup failure">cls = &lt;class &apos;app.tests.service.test_nandos.TestNandos&apos;&gt;

    @classmethod
    def setUpClass(cls):
        cls.n = Nandos(1, 1)
&gt;       cls.n.attempt_login(CREDENTIALS[&apos;nandos&apos;])

app/tests/service/test_nandos.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/agents/base.py:59: in attempt_login
    self.login(credentials)
app/agents/nandos.py:24: in login
    (&apos;body &gt; div &gt; div.rc-anchor-content &gt; div &gt; div &gt; div&apos;, STATUS_LOGIN_FAILED, &apos;ERROR&apos;), ))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;app.agents.nandos.Nandos object at 0x7f51b3e76cf8&gt;, incorrect = &apos;/card/log-in&apos;
error_causes = ((&apos;#content-header div h2&apos;, &apos;STATUS_LOGIN_FAILED&apos;, &apos;Status&apos;), (&apos;.messages&apos;, &apos;TRIPPED_CAPTCHA&apos;, &quot;Error message\nOops, t...ed too many login attempts&quot;), (&apos;body &gt; div &gt; div.rc-anchor-content &gt; div &gt; div &gt; div&apos;, &apos;STATUS_LOGIN_FAILED&apos;, &apos;ERROR&apos;))
url_part = &apos;path&apos;

    def check_error(self, incorrect, error_causes, url_part=&quot;path&quot;):
        parts = urlsplit(self.browser.url)
        if getattr(parts, url_part) != incorrect:
            return
    
        for error in error_causes:
            selector, error_name, error_match = error
            message = self.browser.select(selector)
            if message and message[0].get_text().strip().startswith(error_match):
&gt;               raise LoginError(error_name)
E               app.agents.exceptions.LoginError: Tripped captcha: The agent has tripped the scheme capture code: 532

app/agents/base.py:131: LoginError</error></testcase><testcase classname="app.tests.service.test_nandos.TestNandos" name="test_login" time="0.0001773834228515625"><error message="test setup failure">cls = &lt;class &apos;app.tests.service.test_nandos.TestNandos&apos;&gt;

    @classmethod
    def setUpClass(cls):
        cls.n = Nandos(1, 1)
&gt;       cls.n.attempt_login(CREDENTIALS[&apos;nandos&apos;])

app/tests/service/test_nandos.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/agents/base.py:59: in attempt_login
    self.login(credentials)
app/agents/nandos.py:24: in login
    (&apos;body &gt; div &gt; div.rc-anchor-content &gt; div &gt; div &gt; div&apos;, STATUS_LOGIN_FAILED, &apos;ERROR&apos;), ))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;app.agents.nandos.Nandos object at 0x7f51b3e76cf8&gt;, incorrect = &apos;/card/log-in&apos;
error_causes = ((&apos;#content-header div h2&apos;, &apos;STATUS_LOGIN_FAILED&apos;, &apos;Status&apos;), (&apos;.messages&apos;, &apos;TRIPPED_CAPTCHA&apos;, &quot;Error message\nOops, t...ed too many login attempts&quot;), (&apos;body &gt; div &gt; div.rc-anchor-content &gt; div &gt; div &gt; div&apos;, &apos;STATUS_LOGIN_FAILED&apos;, &apos;ERROR&apos;))
url_part = &apos;path&apos;

    def check_error(self, incorrect, error_causes, url_part=&quot;path&quot;):
        parts = urlsplit(self.browser.url)
        if getattr(parts, url_part) != incorrect:
            return
    
        for error in error_causes:
            selector, error_name, error_match = error
            message = self.browser.select(selector)
            if message and message[0].get_text().strip().startswith(error_match):
&gt;               raise LoginError(error_name)
E               app.agents.exceptions.LoginError: Tripped captcha: The agent has tripped the scheme capture code: 532

app/agents/base.py:131: LoginError</error></testcase><testcase classname="app.tests.service.test_nandos.TestNandos" name="test_transactions" time="0.00015664100646972656"><error message="test setup failure">cls = &lt;class &apos;app.tests.service.test_nandos.TestNandos&apos;&gt;

    @classmethod
    def setUpClass(cls):
        cls.n = Nandos(1, 1)
&gt;       cls.n.attempt_login(CREDENTIALS[&apos;nandos&apos;])

app/tests/service/test_nandos.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/agents/base.py:59: in attempt_login
    self.login(credentials)
app/agents/nandos.py:24: in login
    (&apos;body &gt; div &gt; div.rc-anchor-content &gt; div &gt; div &gt; div&apos;, STATUS_LOGIN_FAILED, &apos;ERROR&apos;), ))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;app.agents.nandos.Nandos object at 0x7f51b3e76cf8&gt;, incorrect = &apos;/card/log-in&apos;
error_causes = ((&apos;#content-header div h2&apos;, &apos;STATUS_LOGIN_FAILED&apos;, &apos;Status&apos;), (&apos;.messages&apos;, &apos;TRIPPED_CAPTCHA&apos;, &quot;Error message\nOops, t...ed too many login attempts&quot;), (&apos;body &gt; div &gt; div.rc-anchor-content &gt; div &gt; div &gt; div&apos;, &apos;STATUS_LOGIN_FAILED&apos;, &apos;ERROR&apos;))
url_part = &apos;path&apos;

    def check_error(self, incorrect, error_causes, url_part=&quot;path&quot;):
        parts = urlsplit(self.browser.url)
        if getattr(parts, url_part) != incorrect:
            return
    
        for error in error_causes:
            selector, error_name, error_match = error
            message = self.browser.select(selector)
            if message and message[0].get_text().strip().startswith(error_match):
&gt;               raise LoginError(error_name)
E               app.agents.exceptions.LoginError: Tripped captcha: The agent has tripped the scheme capture code: 532

app/agents/base.py:131: LoginError</error></testcase><testcase classname="app.tests.service.test_nandos.TestNandosFail" name="test_login_fail" time="0.43195652961730957"><failure message="AssertionError: &apos;Tripped captcha&apos; != &apos;Invalid credentials&apos;
- Tripped captcha
+ Invalid credentials">self = &lt;app.tests.service.test_nandos.TestNandosFail testMethod=test_login_fail&gt;

    def test_login_fail(self):
        n = Nandos(1, 1)
        with self.assertRaises(LoginError) as e:
            n.attempt_login(CREDENTIALS[&apos;bad&apos;])
&gt;       self.assertEqual(e.exception.name, &apos;Invalid credentials&apos;)
E       AssertionError: &apos;Tripped captcha&apos; != &apos;Invalid credentials&apos;
E       - Tripped captcha
E       + Invalid credentials

app/tests/service/test_nandos.py:33: AssertionError</failure></testcase><testcase classname="app.tests.service.test_nectar.TestNectar" name="test_balance" time="0.05594491958618164"/><testcase classname="app.tests.service.test_nectar.TestNectar" name="test_login" time="0.0001518726348876953"/><testcase classname="app.tests.service.test_nectar.TestNectar" name="test_transactions" time="1.2156717777252197"/><testcase classname="app.tests.service.test_odeon.TestOdeon" name="test_balance" time="0.0019004344940185547"/><testcase classname="app.tests.service.test_odeon.TestOdeon" name="test_login" time="6.651878356933594e-05"/><testcase classname="app.tests.service.test_odeon.TestOdeon" name="test_transactions" time="1.3324346542358398"/><testcase classname="app.tests.service.test_odeon.TestOdeonFail" name="test_login_fail" time="1.2490153312683105"/><testcase classname="app.tests.service.test_omni.TestOmni" name="test_balance" time="0.0016279220581054688"/><testcase classname="app.tests.service.test_omni.TestOmni" name="test_login" time="0.00013756752014160156"/><testcase classname="app.tests.service.test_omni.TestOmni" name="test_transactions" time="0.0004115104675292969"/><testcase classname="app.tests.service.test_omni.TestOmniFail" name="test_login_fail" time="1.100370168685913"/><testcase classname="app.tests.service.test_papa_johns.TestPapaJohns" name="test_balance" time="0.021679162979125977"/><testcase classname="app.tests.service.test_papa_johns.TestPapaJohns" name="test_login" time="0.00014829635620117188"/><testcase classname="app.tests.service.test_papa_johns.TestPapaJohns" name="test_transactions" time="0.004596710205078125"/><testcase classname="app.tests.service.test_papa_johns.TestPapaJohnsFail" name="test_login_fail" time="0.9297749996185303"/><testcase classname="app.tests.service.test_paperchase.TestPaperchase" name="test_balance" time="0.7365462779998779"/><testcase classname="app.tests.service.test_paperchase.TestPaperchase" name="test_login" time="0.00012683868408203125"/><testcase classname="app.tests.service.test_paperchase.TestPaperchaseFail" name="test_login_fail" time="1.3155794143676758"/><testcase classname="app.tests.service.test_priority_guest_rewards.TestPriorityGuestRewards" name="test_balance" time="0.2872021198272705"/><testcase classname="app.tests.service.test_priority_guest_rewards.TestPriorityGuestRewards" name="test_login" time="7.05718994140625e-05"/><testcase classname="app.tests.service.test_priority_guest_rewards.TestPriorityGuestRewards" name="test_transactions" time="0.0015256404876708984"/><testcase classname="app.tests.service.test_priority_guest_rewards.TestPriorityGuestRewardsFail" name="test_login_fail" time="4.815443277359009"/><testcase classname="app.tests.service.test_qantas.TestQantas" name="test_balance" time="0.03609919548034668"/><testcase classname="app.tests.service.test_qantas.TestQantas" name="test_login" time="0.0001392364501953125"/><testcase classname="app.tests.service.test_qantas.TestQantas" name="test_transactions" time="0.002148866653442383"/><testcase classname="app.tests.service.test_qantas.TestQantasFail" name="test_login_fail" time="2.7011260986328125"/><testcase classname="app.tests.service.test_quidco.TestQuidco" name="test_balance" time="0.056639909744262695"/><testcase classname="app.tests.service.test_quidco.TestQuidco" name="test_login" time="0.0001652240753173828"/><testcase classname="app.tests.service.test_quidco.TestQuidco" name="test_transactions" time="0.0010073184967041016"/><testcase classname="app.tests.service.test_quidco.TestQuidcoFail" name="test_login_fail" time="0.5507183074951172"/><testcase classname="app.tests.service.test_rewards4fishing.TestRewards4Fishing" name="test_balance" time="0.07343745231628418"/><testcase classname="app.tests.service.test_rewards4fishing.TestRewards4Fishing" name="test_login" time="0.00012159347534179688"/><testcase classname="app.tests.service.test_rewards4fishing.TestRewards4Fishing" name="test_transactions" time="0.0015048980712890625"/><testcase classname="app.tests.service.test_rewards4fishing.TestRewards4FishingFail" name="test_login_fail" time="0.6525945663452148"/><testcase classname="app.tests.service.test_rewards4golf.TestRewards4Golf" name="test_balance" time="0.07115960121154785"/><testcase classname="app.tests.service.test_rewards4golf.TestRewards4Golf" name="test_login" time="0.0001220703125"/><testcase classname="app.tests.service.test_rewards4golf.TestRewards4Golf" name="test_transactions" time="0.0003540515899658203"/><testcase classname="app.tests.service.test_rewards4golf.TestRewards4GolfFail" name="test_login_fail" time="0.6481621265411377"/><testcase classname="app.tests.service.test_rewards4racing.TestRewards4Racing" name="test_balance" time="0.12505245208740234"/><testcase classname="app.tests.service.test_rewards4racing.TestRewards4Racing" name="test_login" time="0.00011181831359863281"/><testcase classname="app.tests.service.test_rewards4racing.TestRewards4Racing" name="test_transactions" time="0.0004889965057373047"/><testcase classname="app.tests.service.test_rewards4racing.TestRewards4RacingFail" name="test_login_fail" time="0.6621501445770264"/><testcase classname="app.tests.service.test_shell.TestShell" name="test_balance" time="0.04573678970336914"/><testcase classname="app.tests.service.test_shell.TestShell" name="test_login" time="0.00013303756713867188"/><testcase classname="app.tests.service.test_shell.TestShell" name="test_transactions" time="0.0033075809478759766"/><testcase classname="app.tests.service.test_shell.TestShellFail" name="test_login_fail" time="1.891106367111206"/><testcase classname="app.tests.service.test_space_nk.TestSpaceNK" name="test_balance" time="0.0008237361907958984"/><testcase classname="app.tests.service.test_space_nk.TestSpaceNK" name="test_login" time="0.0001659393310546875"/><testcase classname="app.tests.service.test_space_nk.TestSpaceNK" name="test_transactions" time="0.00046563148498535156"/><testcase classname="app.tests.service.test_space_nk.TestSpaceNKFail" name="test_login_fail" time="1.6471593379974365"/><testcase classname="app.tests.service.test_sparks.TestSparks" name="test_balance" time="0.17487239837646484"/><testcase classname="app.tests.service.test_sparks.TestSparks" name="test_login" time="0.00016760826110839844"/><testcase classname="app.tests.service.test_sparks.TestSparks" name="test_transactions" time="0.00047278404235839844"/><testcase classname="app.tests.service.test_sparks.TestSparksFail" name="test_login_fail" time="2.1973133087158203"/><testcase classname="app.tests.service.test_starbucks.TestStarbucks" name="test_balance" time="0.0008320808410644531"/><testcase classname="app.tests.service.test_starbucks.TestStarbucksFail" name="test_login_fail" time="27.29968023300171"/><testcase classname="app.tests.service.test_starwood.TestStarwood" name="test_balance" time="0.8387510776519775"><error message="test setup failure">cls = &lt;class &apos;app.tests.service.test_starwood.TestStarwood&apos;&gt;

    @classmethod
    def setUpClass(cls):
        cls.m = Starwood(1, 1)
&gt;       cls.m.attempt_login(CREDENTIALS[&apos;starwood-preferred-guest&apos;])

app/tests/service/test_starwood.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/agents/base.py:59: in attempt_login
    self.login(credentials)
app/agents/starwood.py:19: in login
    (&apos;#genericBEError&apos;, STATUS_ACCOUNT_LOCKED, &apos;Your account is locked&apos;), ))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;app.agents.starwood.Starwood object at 0x7f51b329f668&gt;, incorrect = &apos;/preferredguest/account/sign_in.html&apos;
error_causes = ((&apos;#genericBEError&apos;, &apos;STATUS_LOGIN_FAILED&apos;, &apos;Correct any errors&apos;), (&apos;#genericBEError&apos;, &apos;STATUS_ACCOUNT_LOCKED&apos;, &apos;Your account is locked&apos;)), url_part = &apos;path&apos;

    def check_error(self, incorrect, error_causes, url_part=&quot;path&quot;):
        parts = urlsplit(self.browser.url)
        if getattr(parts, url_part) != incorrect:
            return
    
        for error in error_causes:
            selector, error_name, error_match = error
            message = self.browser.select(selector)
            if message and message[0].get_text().strip().startswith(error_match):
&gt;               raise LoginError(error_name)
E               app.agents.exceptions.LoginError: Account locked on end site: We could not update your account because it appears your account has been locked. This usually results from too many unsuccessful login attempts in a short period of time. Please visit the site or contact its customer support to resolve this issue. Once done, please update your account credentials in case they are changed. code: 434

app/agents/base.py:131: LoginError</error></testcase><testcase classname="app.tests.service.test_starwood.TestStarwood" name="test_login" time="0.00018024444580078125"><error message="test setup failure">cls = &lt;class &apos;app.tests.service.test_starwood.TestStarwood&apos;&gt;

    @classmethod
    def setUpClass(cls):
        cls.m = Starwood(1, 1)
&gt;       cls.m.attempt_login(CREDENTIALS[&apos;starwood-preferred-guest&apos;])

app/tests/service/test_starwood.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/agents/base.py:59: in attempt_login
    self.login(credentials)
app/agents/starwood.py:19: in login
    (&apos;#genericBEError&apos;, STATUS_ACCOUNT_LOCKED, &apos;Your account is locked&apos;), ))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;app.agents.starwood.Starwood object at 0x7f51b329f668&gt;, incorrect = &apos;/preferredguest/account/sign_in.html&apos;
error_causes = ((&apos;#genericBEError&apos;, &apos;STATUS_LOGIN_FAILED&apos;, &apos;Correct any errors&apos;), (&apos;#genericBEError&apos;, &apos;STATUS_ACCOUNT_LOCKED&apos;, &apos;Your account is locked&apos;)), url_part = &apos;path&apos;

    def check_error(self, incorrect, error_causes, url_part=&quot;path&quot;):
        parts = urlsplit(self.browser.url)
        if getattr(parts, url_part) != incorrect:
            return
    
        for error in error_causes:
            selector, error_name, error_match = error
            message = self.browser.select(selector)
            if message and message[0].get_text().strip().startswith(error_match):
&gt;               raise LoginError(error_name)
E               app.agents.exceptions.LoginError: Account locked on end site: We could not update your account because it appears your account has been locked. This usually results from too many unsuccessful login attempts in a short period of time. Please visit the site or contact its customer support to resolve this issue. Once done, please update your account credentials in case they are changed. code: 434

app/agents/base.py:131: LoginError</error></testcase><testcase classname="app.tests.service.test_starwood.TestStarwood" name="test_transactions" time="0.00014591217041015625"><error message="test setup failure">cls = &lt;class &apos;app.tests.service.test_starwood.TestStarwood&apos;&gt;

    @classmethod
    def setUpClass(cls):
        cls.m = Starwood(1, 1)
&gt;       cls.m.attempt_login(CREDENTIALS[&apos;starwood-preferred-guest&apos;])

app/tests/service/test_starwood.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/agents/base.py:59: in attempt_login
    self.login(credentials)
app/agents/starwood.py:19: in login
    (&apos;#genericBEError&apos;, STATUS_ACCOUNT_LOCKED, &apos;Your account is locked&apos;), ))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;app.agents.starwood.Starwood object at 0x7f51b329f668&gt;, incorrect = &apos;/preferredguest/account/sign_in.html&apos;
error_causes = ((&apos;#genericBEError&apos;, &apos;STATUS_LOGIN_FAILED&apos;, &apos;Correct any errors&apos;), (&apos;#genericBEError&apos;, &apos;STATUS_ACCOUNT_LOCKED&apos;, &apos;Your account is locked&apos;)), url_part = &apos;path&apos;

    def check_error(self, incorrect, error_causes, url_part=&quot;path&quot;):
        parts = urlsplit(self.browser.url)
        if getattr(parts, url_part) != incorrect:
            return
    
        for error in error_causes:
            selector, error_name, error_match = error
            message = self.browser.select(selector)
            if message and message[0].get_text().strip().startswith(error_match):
&gt;               raise LoginError(error_name)
E               app.agents.exceptions.LoginError: Account locked on end site: We could not update your account because it appears your account has been locked. This usually results from too many unsuccessful login attempts in a short period of time. Please visit the site or contact its customer support to resolve this issue. Once done, please update your account credentials in case they are changed. code: 434

app/agents/base.py:131: LoginError</error></testcase><testcase classname="app.tests.service.test_starwood.TestStarwoodFail" name="test_login_bad_mfa" time="1.0738029479980469"><failure message="AssertionError: &apos;Account locked on end site&apos; != &apos;Invalid mfa&apos;
- Account locked on end site
+ Invalid mfa">self = &lt;app.tests.service.test_starwood.TestStarwoodFail testMethod=test_login_bad_mfa&gt;

    def test_login_bad_mfa(self):
        m = Starwood(1, 1)
        credentials = CREDENTIALS[&apos;starwood-preferred-guest&apos;].copy()
        credentials[&apos;favourite_place&apos;] = &apos;totally incorrect&apos;
        with self.assertRaises(LoginError) as e:
            m.attempt_login(credentials)
&gt;       self.assertEqual(e.exception.name, &apos;Invalid mfa&apos;)
E       AssertionError: &apos;Account locked on end site&apos; != &apos;Invalid mfa&apos;
E       - Account locked on end site
E       + Invalid mfa

app/tests/service/test_starwood.py:45: AssertionError</failure></testcase><testcase classname="app.tests.service.test_starwood.TestStarwoodFail" name="test_login_fail" time="1.1351792812347412"><failure message="AssertionError: &apos;An unknown error has occurred&apos; != &apos;Invalid credentials&apos;
- An unknown error has occurred
+ Invalid credentials">self = &lt;app.tests.service.test_starwood.TestStarwoodFail testMethod=test_login_fail&gt;

    def test_login_fail(self):
        m = Starwood(1, 1)
        credentials = {
            &apos;username&apos;: &apos;321321321&apos;,
            &apos;password&apos;: &apos;321321321&apos;,
        }
        with self.assertRaises(LoginError) as e:
            m.attempt_login(credentials)
&gt;       self.assertEqual(e.exception.name, &apos;Invalid credentials&apos;)
E       AssertionError: &apos;An unknown error has occurred&apos; != &apos;Invalid credentials&apos;
E       - An unknown error has occurred
E       + Invalid credentials

app/tests/service/test_starwood.py:37: AssertionError</failure></testcase><testcase classname="app.tests.service.test_superdrug.TestSuperDrug" name="test_balance" time="0.0017316341400146484"><failure message="IndexError: list index out of range">self = &lt;app.tests.service.test_superdrug.TestSuperDrug testMethod=test_balance&gt;

    def test_balance(self):
&gt;       balance = self.b.balance()

app/tests/service/test_superdrug.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;app.agents.superdrug.Superdrug object at 0x7f51b1ed9438&gt;

    def balance(self):
&gt;       value = extract_decimal(self.browser.select(&quot;.greybg&quot;)[0].contents[0])
E       IndexError: list index out of range

app/agents/superdrug.py:24: IndexError</failure></testcase><testcase classname="app.tests.service.test_superdrug.TestSuperDrug" name="test_login" time="0.0002589225769042969"><failure message="AssertionError: 504 != 200">self = &lt;app.tests.service.test_superdrug.TestSuperDrug testMethod=test_login&gt;

    def test_login(self):
&gt;       self.assertEqual(self.b.browser.response.status_code, 200)
E       AssertionError: 504 != 200

app/tests/service/test_superdrug.py:16: AssertionError</failure></testcase><testcase classname="app.tests.service.test_superdrug.TestSuperDrug" name="test_transactions" time="0.0005521774291992188"/><testcase classname="app.tests.service.test_superdrug.TestSuperDrugFail" name="test_login_fail" time="0.7389881610870361"/><testcase classname="app.tests.service.test_tabletable.TestTabletable" name="test_balance" time="0.0148773193359375"/><testcase classname="app.tests.service.test_tabletable.TestTabletable" name="test_login" time="0.00014662742614746094"/><testcase classname="app.tests.service.test_tabletable.TestTabletable" name="test_transactions" time="0.603792667388916"/><testcase classname="app.tests.service.test_tabletable.TestTabletableFail" name="test_login_fail" time="1.030998945236206"/><testcase classname="app.tests.service.test_tesco.TestTesco" name="test_balance" time="0.019361495971679688"/><testcase classname="app.tests.service.test_tesco.TestTesco" name="test_login" time="0.00016927719116210938"/><testcase classname="app.tests.service.test_tesco.TestTesco" name="test_transactions" time="0.31470799446105957"/><testcase classname="app.tests.service.test_tesco.TestTescoUtil" name="test_get_card_number" time="0.00041031837463378906"/><testcase classname="app.tests.service.test_tesco.TestTescoFail" name="test_login_fail" time="0.5248370170593262"/><testcase classname="app.tests.service.test_tesco.TestTescoFail" name="test_login_mfa_fail" time="2.0208194255828857"/><testcase classname="app.tests.service.test_thai_airways.TestThaiAirways" name="test_balance" time="0.017433881759643555"/><testcase classname="app.tests.service.test_thai_airways.TestThaiAirways" name="test_login" time="0.00015997886657714844"/><testcase classname="app.tests.service.test_thai_airways.TestThaiAirways" name="test_transactions" time="0.0004570484161376953"/><testcase classname="app.tests.service.test_thai_airways.TestThaiAirwaysFail" name="test_login_bad_password" time="1.280954360961914"/><testcase classname="app.tests.service.test_thai_airways.TestThaiAirwaysFail" name="test_login_bad_username" time="1.560863971710205"/><testcase classname="app.tests.service.test_the_perfume_shop.TestThePerfumeShop" name="test_balance" time="0.05038905143737793"/><testcase classname="app.tests.service.test_the_perfume_shop.TestThePerfumeShop" name="test_login" time="0.00014781951904296875"/><testcase classname="app.tests.service.test_the_perfume_shop.TestThePerfumeShop" name="test_transactions" time="0.0003807544708251953"/><testcase classname="app.tests.service.test_the_perfume_shop.TestThePerfumeShopFail" name="test_login_fail" time="0.4183158874511719"/><testcase classname="app.tests.service.test_the_works.TestTheWorks" name="test_balance" time="1.1465740203857422"/><testcase classname="app.tests.service.test_the_works.TestTheWorks" name="test_login" time="0.0001742839813232422"/><testcase classname="app.tests.service.test_the_works.TestTheWorks" name="test_transactions" time="1.1497488021850586"/><testcase classname="app.tests.service.test_the_works.TestTheWorksFail" name="test_login_fail" time="1.2308681011199951"/><testcase classname="app.tests.service.test_toysrus.TestToysrus" name="test_balance" time="0.14197206497192383"/><testcase classname="app.tests.service.test_toysrus.TestToysrus" name="test_login" time="0.0001595020294189453"/><testcase classname="app.tests.service.test_toysrus.TestToysrusFail" name="test_login_bad_credentials" time="0.3429994583129883"/><testcase classname="app.tests.service.test_virgin.TestVirgin" name="test_balance" time="0.02555251121520996"/><testcase classname="app.tests.service.test_virgin.TestVirgin" name="test_login" time="0.00014829635620117188"/><testcase classname="app.tests.service.test_virgin.TestVirgin" name="test_transactions" time="0.002027273178100586"/><testcase classname="app.tests.service.test_virgin.TestVirginFail" name="test_login_fail" time="0.2764091491699219"/><testcase classname="app.tests.service.test_waterstones.TestWaterstones" name="test_balance" time="0.31685543060302734"/><testcase classname="app.tests.service.test_waterstones.TestWaterstones" name="test_login" time="0.00012350082397460938"/><testcase classname="app.tests.service.test_waterstones.TestWaterstones" name="test_transactions" time="0.2026047706604004"/><testcase classname="app.tests.service.test_waterstones.TestWaterstonesFail" name="test_login_fail" time="0.4636263847351074"/><testcase classname="app.tests.unit.test_base.TestBase" name="test_agent_login_missing_credentials" time="0.5539677143096924"/><testcase classname="app.tests.unit.test_base.TestBase" name="test_attempt_login" time="0.0012385845184326172"/><testcase classname="app.tests.unit.test_base.TestBase" name="test_attempt_login_exception" time="0.0003705024719238281"/><testcase classname="app.tests.unit.test_base.TestBase" name="test_check_error" time="0.027027606964111328"/><testcase classname="app.tests.unit.test_base.TestBase" name="test_default_point_conversion" time="0.00033974647521972656"/><testcase classname="app.tests.unit.test_base.TestBase" name="test_duplicate_transactions" time="0.0007159709930419922"/><testcase classname="app.tests.unit.test_base.TestBase" name="test_format_plural_label" time="0.0003376007080078125"/><testcase classname="app.tests.unit.test_base.TestBase" name="test_hashed_transaction" time="0.0007748603820800781"/><testcase classname="app.tests.unit.test_base.TestBase" name="test_path_check_error_exception" time="0.02778935432434082"/><testcase classname="app.tests.unit.test_base.TestBase" name="test_point_conversion" time="0.0002982616424560547"/><testcase classname="app.tests.unit.test_base.TestOpenURL" name="test_open_url_error_status" time="0.0032973289489746094"/><testcase classname="app.tests.unit.test_encryption.TestEncryption" name="test_do_not_allow_decryption_of_none" time="0.001340627670288086"/><testcase classname="app.tests.unit.test_encryption.TestEncryption" name="test_do_not_allow_encryption_of_none" time="0.00022125244140625"/><testcase classname="app.tests.unit.test_encryption.TestEncryption" name="test_encrypt_decrypt" time="0.0003285408020019531"/><testcase classname="app.tests.unit.test_encryption.TestEncryption" name="test_encrypt_decrypt_dictionary" time="0.0003790855407714844"/><testcase classname="app.tests.unit.test_publish.TestRetry" name="test_balance" time="0.0011086463928222656"/><testcase classname="app.tests.unit.test_publish.TestRetry" name="test_transactions" time="0.000982522964477539"/><testcase classname="app.tests.unit.test_publish.TestRetry" name="test_transactions_none" time="0.00010204315185546875"/><testcase classname="app.tests.unit.test_resources.TestResources" name="test_account_overview" time="0.011124134063720703"/><testcase classname="app.tests.unit.test_resources.TestResources" name="test_agent_login_inc" time="0.007088422775268555"/><testcase classname="app.tests.unit.test_resources.TestResources" name="test_agent_login_retry_limit" time="0.006846427917480469"/><testcase classname="app.tests.unit.test_resources.TestResources" name="test_bad_agent" time="0.0036749839782714844"/><testcase classname="app.tests.unit.test_resources.TestResources" name="test_bad_parameters" time="0.005390167236328125"/><testcase classname="app.tests.unit.test_resources.TestResources" name="test_transactions" time="0.0058994293212890625"/><testcase classname="app.tests.unit.test_resources.TestResources" name="test_transactions_none" time="0.007962703704833984"/><testcase classname="app.tests.unit.test_resources.TestResources" name="test_user_balances" time="0.0055086612701416016"/><testcase classname="app.tests.unit.test_retry.TestRetry" name="test_get_count" time="0.0004668235778808594"/><testcase classname="app.tests.unit.test_retry.TestRetry" name="test_get_key" time="8.296966552734375e-05"/><testcase classname="app.tests.unit.test_retry.TestRetry" name="test_inc_count" time="0.0005922317504882812"/><testcase classname="app.tests.unit.test_retry.TestRetry" name="test_max_out_count" time="0.0011715888977050781"/><testcase classname="app.tests.unit.test_utils.TestUtils" name="test_extract_decimal" time="0.00012493133544921875"/><testcase classname="app.tests.unit.test_utils.TestUtils" name="test_generate_random_key" time="0.00019788742065429688"/></testsuite>