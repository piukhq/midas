name: ci

on:
  workflow_dispatch:
  push:
    branches: [ develop, master ]
  pull_request:
    branches: [ develop, master ]
  release:
    types: [ published ]

jobs:
  tests:
    name: tests
    runs-on: ubuntu-latest
    env:
      AZURE_AAD_TENANT_ID: a6e2367a-92ea-4e5a-b565-723830bcc095
      ITSU_VOUCHER_OFFER_ID: 0
      POSTGRES_USER: postgres
      POSTGRES_HOST: 127.0.0.1
      POSTGRES_DB: midas_test
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: midas_test
    steps:
      - uses: actions/checkout@v3
      - uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: "."
          scanners: "vuln"
          vuln-type: library
          ignore-unfixed: true
          exit-code: 0
          severity: UNKNOWN,LOW,MEDIUM
      - uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: "."
          scanners: "vuln"
          vuln-type: library
          ignore-unfixed: true
          exit-code: 1
          severity: HIGH,CRITICAL
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - run: pip install poetry
      - run: poetry self add "poetry-dynamic-versioning[plugin]"
      - run: poetry config repositories.pypi-azure https://pkgs.dev.azure.com/binkhq/_packaging/binkhq/pypi/upload/
      - run: poetry config http-basic.pypi-azure jeff ${{ secrets.AZURE_DEVOPS_PAT }}
      - run: poetry build
      - run: poetry publish -r pypi-azure
      - run: pytest --verbose --cov app --cov-report term-missing app/tests/unit
      - run: xenon --max-average A --max-modules B --max-absolute B .
      - run: mypy app
      - run ruff check .
  create_dev_release:
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    name: create_dev_release
    runs-on: ubuntu-latest
    needs: [ tests ]
    steps:
      - uses: actions/checkout@v3
      - run: echo "container_tag=$(date +'%FT%H%M%SZ')" >> $GITHUB_ENV
      - uses: docker/login-action@v2
        with:
          registry: binkcore.azurecr.io
          username: binkcore
          password: ${{ secrets.ACR_BINKCORE_PASSWORD }}
      - uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            binkcore.azurecr.io/midas:${{ env.container_tag }}
            binkcore.azurecr.io/midas:latest
  create_tag_release:
    if: github.event_name == 'release' && github.event.action == 'published'
    name: create_tag_release
    runs-on: ubuntu-latest
    needs: [ tests ]
    steps:
      - uses: actions/checkout@v3
      - name: tag_check
        run: |
          if ! [[ ${{ github.event.release.tag_name }} =~ [0-9]+.[0-9]+.[0-9]+ ]]; then
            exit 1;
          fi
      - uses: docker/login-action@v2
        with:
          registry: binkcore.azurecr.io
          username: binkcore
          password: ${{ secrets.ACR_BINKCORE_PASSWORD }}
      - uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            binkcore.azurecr.io/midas:${{ github.event.release.tag_name }}
            binkcore.azurecr.io/midas:staging-${{ github.event.release.tag_name }}
            binkcore.azurecr.io/midas:staging
